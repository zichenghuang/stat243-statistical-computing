Best Practices for Scientific Computing

The Wilson paper has outlined several best practices for scientific computing that are aiming to make the designed software to be readable, reproducible, tested, and version controlled. Some of the suggested best practices which seemed compelling to me include breaking up the program into easy-understanding functions which is similar to creating a object-oriented programming concept. The author suggests that each of the resulting functions should conducts a simple task to prevent from creating a large chunk of codes doing various different tasks all at once. In addition, the practice about regression testing is something compelling to me as I have only used unit test throughout most of the coding. Regression tests are necessary since we need to make sure any changes or revisions to the codes will not affect the existing correct features of the program. In other words, regression test can ensure the changes are actually making progressing instead of breaking things that work before the revision. The idea of turning bugs into test cases is also intriguing to me as an alternative way to find bugs that might be hard to identify. This practice can be combined with the test-driven development when building a program in a sense that these practices can give you ideas about what you need to be cautious during the development of your program. 

Among the various best practices discussed in the paper, I have used practices such as using meaningful names, sticking with consistent coding format, performing automated and repetitive tasks with programming tools, using version control, making reusable codes, and documenting the code. However, I tends not to work in small steps with frequent feedback and course correction in that the programs and functions that I have worked on tend to have a clear objective or task to achieve. Moreover, I tend to document the mechanics of the underlying code to remind me of the function of the code. 

The paper points out that these best practices are not implemented by every researcher since some researchers are "lack of exposure to basic software development practices such as writing maintainable code, using version control and issue trackers, code review, unit testing, and task automation". In my perspective, version control, reusable and reproducible codes with relevant test are used by most of the researchers. Most of the practices introduced in this paper can be applied to both the field of data analysis and software development such as the naming convention, version control, and coding documentation. The usage of various tests and oracles might be more applicable for software development along with the practice which emphasize the small and frequent incremental changes in the progress of programs.